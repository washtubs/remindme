#compdef remindme

#FIXME - make this completion function only work with the read action
#

function _log-comp() {
    echo "$@" >/dev/pts/9
}

function _u-reminder() {
    local comp
    comp=( "qq" "asdasd" )
    _describe -t date 'date' comp && ret=0
}

function _comp-ids() {
    local start_index=$1
    shift
    local ids
    ids=( $@ )
    local new; 
    new=()
    #for r in $new; do echo $r >/dev/pts/9 ; done
    for i in $ids; do
        local match=false
        for index in {${start_index}..${#line}} ; do
            local current_id=$line[$index]
            # if no match, then fail (exit 1) and keep element
            echo $i | awk -F: -vcurrent_id=$current_id '$1!=current_id{exit 1}' &&
                match=true
            $match && break
        done
        $match || new+="$i"
    done
    _describe -t ids 'read' new && ret=0
}

typeset -A opt_args

_arguments -C \
  '1:cmd:->cmds' \
  '*:: :->args' \
&& ret=0

case "$state" in
    (cmds)
        local commands; 
        commands=(
            "in"
            "at"
            "update"
            "mark-read" 
            "show-unread"
            "show-upcoming"
        )
        _describe -t commands 'command' commands && ret=0
    ;;

    (args)
        case $line[1] in
            mark-read)
                unreads=("${(@f)$(_show-unread completer)}")
                _comp-ids 2 $unreads
                ;;
            update)
                case "$line[${#line}]" in
                    "in")
                        _u-reminder
                        ;;
                    *)
                        unreads=("${(@f)$(_show-unread completer)}")
                        _comp-ids 2 $unreads
                        ;;
                esac
                ;;
        esac
  ;;

  (update)
      _u-reminder
      ;;

  #(generator_lists)
    #local generators; generators=(
      #'controller:creates a new controller'
      #'mailer:creates a new mailer'
      #'migration:creates a new migration'
      #'model:creates a new model'
      #'project:create a new Padrino app'
      #'plugin:add plugin to your app'
    #)
    #_describe -t generators 'generator' generators && ret=0
  #;;
  #(args)
    #case $line[2] in
      #(controller)
        #_arguments \
          #'-d:remove all generated files' \
          #'-n:specify the application' \
          #'-r:specify the root'
          #ret=0
      #;;
      #(mailer)
        #local mailers; mailers=(
          #'-a:creates a mailer for the specified subapp'
          #'-d:removes all generated files'
          #'-n:specify the application'
          #'-r:specify the root destination path'
        #)
        #_describe -t mailers 'mailer' mailers && ret=0
      #;;
      #...
      #;;
    #esac
  #;;
esac

return 1
